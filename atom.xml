<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sean Bowen-Williams]]></title>
  <link href="http://sbowenwilliams.github.io/atom.xml" rel="self"/>
  <link href="http://sbowenwilliams.github.io/"/>
  <updated>2016-05-03T16:08:55-05:00</updated>
  <id>http://sbowenwilliams.github.io/</id>
  <author>
    <name><![CDATA[Sean Bowen-Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Very Basics of Vim Registers]]></title>
    <link href="http://sbowenwilliams.github.io/blog/2016/04/29/the-very-basics-of-vim-registers/"/>
    <updated>2016-04-29T15:33:00-05:00</updated>
    <id>http://sbowenwilliams.github.io/blog/2016/04/29/the-very-basics-of-vim-registers</id>
    <content type="html"><![CDATA[<h2>But Why?</h2>

<p>Registers open up a world of possibilities in Vim. If you&rsquo;re not using them, then you&rsquo;re potentially limiting your Vim productivity.</p>

<p>For example, how many times has the following situation happened to you?</p>

<p>You want to copy a line of text so you:</p>

<ol>
<li><p>Yank the line in question</p></li>
<li><p>Delete another line along the way</p></li>
<li><p>Attempt to put the original line, accidentally putting the deleted line</p></li>
</ol>


<p><img src="http://seanbw.com/images/vim_registers1.gif"></p>

<p>This was a major hurdle while switching from RubyMine to Vim full time. Luckily I had a much more experienced, handsome coworker (shoutouts to Tony) who revealed to me the awesome that are Vim registers.</p>

<p>To see them in action yourself, open Vim and type <code>:reg</code></p>

<p>No, seriously, do it. I&rsquo;ll wait.</p>

<p><img src="http://seanbw.com/images/waiting.gif"></p>

<p>Want to put the last line you yanked and NOT the last one you deleted?
Use the <code>0</code>th register.
<code>"0p</code></p>

<p>Cool right? Now, let&rsquo;s go over another example.</p>

<h2>Named Registers</h2>

<p>Another fantastically useful feature of registers are named registers. This gives you the ability to store text under an alias for later use.</p>

<p>In this example I copy the final line to the &lsquo;a&rsquo; register with:
<code>"ayy</code>
and you then you can see it in the &lsquo;a&rsquo; register!
This text can later be put with:
`&ldquo;ap'</p>

<p><img src="http://seanbw.com/images/vim_registers2.gif"></p>

<h2>Final Thoughts</h2>

<p>We&rsquo;ve only scratched the surface on what&rsquo;s possible with Vim registers. <a href="http://usevim.com/2012/04/13/registers/">Use Vim</a> and <a href="http://vimcasts.org/episodes/meet-the-yank-register/">Vim Casts</a> both have excellent tutorials for more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Increasing Vagrant Performance for Rails Development]]></title>
    <link href="http://sbowenwilliams.github.io/blog/2016/04/22/increasing-vagrant-performance-for-rails-development/"/>
    <updated>2016-04-22T11:48:07-05:00</updated>
    <id>http://sbowenwilliams.github.io/blog/2016/04/22/increasing-vagrant-performance-for-rails-development</id>
    <content type="html"><![CDATA[<p>Vagrant is awesome. It kicks ass. It&rsquo;s the cat&rsquo;s pajamas. It allows you to modularize dependencies that are specific to your app. It makes my life better in nearly every conceivable way, and it even makes me a better lover.</p>

<p>But for all its pros, Vagrant is still a virtual machine and virtual machines are slow. But don&rsquo;t fret, there are optimizations we can make to speed up your rails app within Vagrant.</p>

<h2>Disable Log files</h2>

<p>Rails likes to write stuff down. A lot. When I cracked open my own <code>development.log</code> file it had nearly half a million lines. That&rsquo;s lots of wasted operations writing to a file. I&rsquo;m going to share a dirty secret: I&rsquo;ve never used the development log file for debugging. So let&rsquo;s get rid of it.
Within <code>config/development.rb</code> add:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ProjectName::Application.configure do
</span><span class='line'>    config.logger = ActiveSupport::Logger.new(nil)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Where <code>ProjectName</code> is the, well, name of your project.</p>

<p>This still provides output for the console and seems to work well with other logging gems.</p>

<h2>Use The NFS</h2>

<p>VirtualBox uses it&rsquo;s own protocol to share files between the host and Vagrant by default. NFS, in most cases, will be much faster. Luckily switching over is dead simple. Fire up your favorite text editor and add the following to your Vagrantfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Required, pick a local IP
</span><span class='line'>config.vm.network :private_network, ip: '192.168.x.x'
</span><span class='line'>config.vm.synced_folder '.', '/vagrant', nfs: true</span></code></pre></td></tr></table></div></figure>


<h2>Just one core please</h2>

<p>More is not always&hellip; more. It has been proven <a href="https://ruin.io/2014/benchmarking-virtualbox-multiple-core-performance/">several</a> <a href="http://www.mihaimatei.com/virtualbox-performance-issues-multiple-cpu-cores/">times</a> (okay, a couple times) that adding multiple cores actually reduces VirtualBox performance.
Once again edit your Vagrantfile to include the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vb.customize ["modifyvm", :id, "--cpus", "1"]</span></code></pre></td></tr></table></div></figure>


<h2>Final Thoughts</h2>

<p>There are definitely other tweaks out there that could increase performance, but the above have the biggest impact for me. The jury is still out on an optimal amount of RAM, but the consensus is somewhere between &frac14; and &frac12; total system memory. I encourage experimentation.</p>
]]></content>
  </entry>
  
</feed>
